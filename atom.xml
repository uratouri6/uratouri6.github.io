<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[<urouro>]]></title>
  <subtitle><![CDATA[村田製作場日誌]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://uratouri6.github.io/"/>
  <updated>2015-12-15T05:32:49.000Z</updated>
  <id>http://uratouri6.github.io/</id>
  
  <author>
    <name><![CDATA[uratouri6]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ラズパイで多機能監視カメラを作る(3)]]></title>
    <link href="http://uratouri6.github.io/2015/12/15/006-raspi-camera3/"/>
    <id>http://uratouri6.github.io/2015/12/15/006-raspi-camera3/</id>
    <published>2015-12-15T03:47:12.000Z</published>
    <updated>2015-12-15T05:32:49.000Z</updated>
    <content type="html"><![CDATA[<p>今回は、保存した映像を自動でDropboxにアップロードするようにします。<br>Dropboxに保存することで、PCやスマートフォンでいつでも映像を見れるようになります。</p>
<h2 id="App_Key、App_secretの取得">App Key、App secretの取得</h2><p>ラズパイからDropboxに接続するために、App KeyとApp secretを取得します。</p>
<p>Dropboxのアカウントを作成し、以下のURLにアクセスします。<br><a href="https://www.dropbox.com/developers/apps" target="_blank" rel="external">https://www.dropbox.com/developers/apps</a></p>
<p>ページ右上のCreate appをクリックし、以下のように設定します。</p>
<ul>
<li><p><strong>Choose an API</strong><br>Dropbox API</p>
</li>
<li><p><strong>Choose the type of access you need</strong><br>Full Dropbox</p>
</li>
<li><p><strong>Name your app</strong><br>適当に</p>
</li>
</ul>
<img src="/2015/12/15/006-raspi-camera3/drop1.png" alt="設定画面" title="設定画面">
<p>設定が完了すると、App KeyとApp secretが表示されます。</p>
<img src="/2015/12/15/006-raspi-camera3/drop2.png" alt="App Key,App secret" title="App Key,App secret">
<h2 id="Dropbox-Uploaderのダウンロード">Dropbox-Uploaderのダウンロード</h2><p>Dropboxにファイルをアップロードするスクリプトをダウンロードします。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo wget https://raw.github.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh</span><br></pre></td></tr></table></figure></p>
<p>スクリプトを実行すると、初回のみApp KeyとApp secretの入力を求められます。<br>これで、Dropboxにファイルをアップロードできるようになります。</p>
<p>次に、motionからDropbox-Uploaderへの橋渡しをするスクリプトを作成します。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim motion/motion_up.sh</span><br></pre></td></tr></table></figure></p>
<p>以下の内容を書きます。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line">FILE=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">DROPBOX=/motion/<span class="variable">$&#123;FILE##*/&#125;</span></span><br><span class="line"></span><br><span class="line">/home/pi/dropbox_uploader.sh upload <span class="variable">$FILE</span> <span class="variable">$DROPBOX</span></span><br><span class="line"></span><br><span class="line">rm <span class="variable">$FILE</span></span><br></pre></td></tr></table></figure></p>
<p>このスクリプトでは、引数のファイルをDropboxのmotionというフォルダにアップロードし、そのファイルの削除を行っています。</p>
<h2 id="on_movie_endの編集">on_movie_endの編集</h2><p>motion.confを開きます。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/motion/motion.conf</span><br></pre></td></tr></table></figure></p>
<p>前回はon_movie_startを編集することで、撮影の開始するタイミングでスピーカーから音を鳴らしましたが、今回はon_movie_endを編集し、撮影の終了するタイミングで作成したスクリプトを動作させます。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">on_movie_end <span class="string">"/home/pi/motion/motion_up.sh %f"</span></span><br></pre></td></tr></table></figure></p>
<p>%fには保存された映像のフルパスが渡されます。</p>
<h2 id="motionの起動">motionの起動</h2><p>on_movie_endではユーザー「motion」でイベントが実行されるため、ファイルの削除を行うため、権限の変更を行います。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod -R <span class="number">707</span> motion/</span><br></pre></td></tr></table></figure></p>
<p>motionを起動します。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo motion</span><br></pre></td></tr></table></figure></p>
<p>motionの撮影が終わると、Dropboxのmotionフォルダに映像が保存され、PCやスマートフォンから映像を見れるようになります。</p>
<img src="/2015/12/15/006-raspi-camera3/drop3.png" alt="motionフォルダ" title="motionフォルダ">
]]></content>
    <summary type="html">
    <![CDATA[<p>今回は、保存した映像を自動でDropboxにアップロードするようにします。<br>Dropboxに保存することで、PCやスマートフォンでいつでも映像を見れるようになります。</p>
<h2 id="App_Key、App_secretの取得">App Key、App sec]]>
    </summary>
    
      <category term="RaspberryPi" scheme="http://uratouri6.github.io/tags/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ラズパイで多機能監視カメラを作る(2)]]></title>
    <link href="http://uratouri6.github.io/2015/12/14/005-raspi-camera2/"/>
    <id>http://uratouri6.github.io/2015/12/14/005-raspi-camera2/</id>
    <published>2015-12-13T16:10:23.000Z</published>
    <updated>2015-12-13T17:28:09.000Z</updated>
    <content type="html"><![CDATA[<p>前回までの作業では、限られたブラウザでしか映像を見ることができませんでした。<br>今回は、他のブラウザやスマートフォンで映像を見れるようにします。<br>また、動きを検知した時にスピーカーから音を鳴らすようにします。</p>
<h2 id="追加で用意するもの">追加で用意するもの</h2><ul>
<li>スピーカー</li>
</ul>
<img src="/2015/12/14/005-raspi-camera2/speaker.png" alt="100均で買ったスピーカー" title="100均で買ったスピーカー">
<h2 id="Apache2のインストール">Apache2のインストール</h2><p>ラズパイをWebサーバーとして使うため、Apache2をインストールします。</p>
<p>まずパッケージを更新。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure></p>
<p>Apache2をインストール。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install apache2</span><br></pre></td></tr></table></figure></p>
<p>インストールが終わったらPCのブラウザからhttp&#x3a;//[ラズパイのIPアドレス]にアクセスしてみます。</p>
<img src="/2015/12/14/005-raspi-camera2/web.png" alt="webページ" title="webページ">
<p>Apache2のwebページのディレクトリは/var/www/html/になります。<br>つまり、http&#x3a;//[ラズパイのIPアドレス]にアクセスすると、/var/www/html/index.htmlの内容が表示されます。</p>
<h2 id="ストリーミング配信">ストリーミング配信</h2><p>ストリーミング配信用のテストページを作ります。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /var/www/html</span><br><span class="line">$ touch test.html</span><br></pre></td></tr></table></figure></p>
<p>テストページの内容を編集します。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim test.html</span><br></pre></td></tr></table></figure></p>
<p>以下の内容を書きます。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">htmld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Motion<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://[ラズパイのIPアドレス]:8081"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>imgタグでmotionの映像を表示させるだけですが、これでChromeなどのブラウザや、スマートフォンから映像を見れるようになります。<br>http&#x3a;//[ラズパイのIPアドレス]/test.htmlにアクセスしてみます。</p>
<img src="/2015/12/14/005-raspi-camera2/stream.png" alt="test.html" title="test.html">
<h2 id="スピーカを鳴らす">スピーカを鳴らす</h2><p>動きを検知し、撮影が始まるタイミングで音が鳴るようにしましょう。<br>適当な.wavの音楽ファイルを用意します。<br>ここでは、alert.wavというファイルをhome/pi/motionに用意しました。</p>
<p>motion.confを編集します。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/motion/motion.conf</span><br></pre></td></tr></table></figure></p>
<p>600行目あたりにある、on_movie_startを編集します。<br>on_movie_startは、動体を検知したタイミングで動作するため、ここで音を鳴らすように設定します。<br>aplayはwavファイルを再生するコマンドです。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">on_movie_start <span class="string">"aplay /home/pi/motion/alert.wav"</span></span><br></pre></td></tr></table></figure></p>
<p>これで、動体検知時にスピーカーから音が鳴るようになりました。<br>スピーカーの音量は、alsamixerコマンド等から設定できます。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ alsamixer</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前回までの作業では、限られたブラウザでしか映像を見ることができませんでした。<br>今回は、他のブラウザやスマートフォンで映像を見れるようにします。<br>また、動きを検知した時にスピーカーから音を鳴らすようにします。</p>
<h2 id="追加で用意するもの">追加で用]]>
    </summary>
    
      <category term="RaspberryPi" scheme="http://uratouri6.github.io/tags/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ラズパイで多機能監視カメラを作る(1)]]></title>
    <link href="http://uratouri6.github.io/2015/12/09/004_raspi-camera1/"/>
    <id>http://uratouri6.github.io/2015/12/09/004_raspi-camera1/</id>
    <published>2015-12-09T07:40:31.000Z</published>
    <updated>2015-12-13T17:24:19.000Z</updated>
    <content type="html"><![CDATA[<p>ラズパイを使って、監視カメラを作ってみます。<br>監視カメラはいろいろな方法で実現できるのですが、今回はmotionを使います。<br>motionを使うことで、動体検知や映像のストリーミングが簡単に行えます。</p>
<h2 id="用意するもの">用意するもの</h2><ul>
<li>ラズパイ一式</li>
<li>USBカメラ</li>
</ul>
<img src="/2015/12/09/004_raspi-camera1/raspi.png" alt="用意するもの" title="用意するもの">
<h2 id="motionの導入">motionの導入</h2><p>まずパッケージを更新。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure></p>
<p>motionをインストールします。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install motion</span><br></pre></td></tr></table></figure></p>
<h2 id="motionの設定">motionの設定</h2><p>motionの設定は、motion.confで変えることができます。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/motion/motion.conf</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p><strong>daemon</strong> off<br>デーモンモードで起動するか設定します。<br>この時点ではoffにしておきます。</p>
</li>
<li><p><strong>width</strong> 640<br>撮影する映像の横の解像度を設定します。</p>
</li>
<li><p><strong>height</strong> 480<br>撮影する映像の縦の解像度を設定します。</p>
</li>
<li><p><strong>framerate</strong> 20<br>撮影する映像のフレームレートを設定します。</p>
</li>
<li><p><strong>threshold</strong> 2000<br>動体検知のしきい値を設定します。<br>設定したピクセル数以上の変化があった場足、映像の録画が始まります。</p>
</li>
<li><p><strong>event_gap</strong> 60<br>動体検知で録画する間隔を設定します。<br>映像の録画後、設定した秒数以内に再び動きが検知された場合、一つの映像として保存されます。</p>
</li>
<li><p><strong>output_pictures</strong> off<br>動きが検知された場合に静止画を保存するか設定します。</p>
</li>
<li><p><strong>ffmpeg_output_movies</strong> on<br>動きが検知された場合に映像を保存するか設定します。</p>
</li>
<li><p><strong>target_dir</strong> motion/file<br>ファイルの保存先を指定します。</p>
</li>
<li><p><strong>movie_filename</strong> %Y%m%d%H%M%S<br>保存する映像ファイルの名前を設定します。</p>
</li>
<li><p><strong>stream_maxrate</strong> 20<br>ストリーミング配信のフレームレートを設定します。</p>
</li>
<li><p><strong>stream_localhost</strong> off<br>ストリーミング配信をローカルホストに限定するか設定します。</p>
</li>
</ul>
<h2 id="motionの起動">motionの起動</h2><p>motionを起動します<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo motion</span><br></pre></td></tr></table></figure></p>
<p>起動後、撮影している画面内で動きが検知されると、aviファイルとして保存されます。</p>
<img src="/2015/12/09/004_raspi-camera1/motion.png" alt="保存されたaviファイル" title="保存されたaviファイル">
<p>また、ブラウザからhttp&#x3a;//[ラズパイのIPアドレス]:8081にアクセスすると、ストリーミング配信を見ることができます。<br>しかし、この時点では限られたブラウザ（Firefox,Safari等）でしか見ることができません。<br>次回はこの点について進めていこうと思います。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ラズパイを使って、監視カメラを作ってみます。<br>監視カメラはいろいろな方法で実現できるのですが、今回はmotionを使います。<br>motionを使うことで、動体検知や映像のストリーミングが簡単に行えます。</p>
<h2 id="用意するもの">用意するもの</h2]]>
    </summary>
    
      <category term="RaspberryPi" scheme="http://uratouri6.github.io/tags/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ラズパイでネットワークミュージックプレイヤーを作る]]></title>
    <link href="http://uratouri6.github.io/2015/11/05/003_how-to-volumio/"/>
    <id>http://uratouri6.github.io/2015/11/05/003_how-to-volumio/</id>
    <published>2015-11-04T17:15:28.000Z</published>
    <updated>2015-12-09T15:49:50.000Z</updated>
    <content type="html"><![CDATA[<p>昨年から、ラズパイをAirPlayレシーバーにし、接続したスピーカーから音楽を再生していたのですが、<br>音質の劣化や反応の遅れがあり、Volumioを導入することにしました。</p>
<h2 id="必要機材">必要機材</h2><ul>
<li>Raspberry Pi（今回はB+を使用）</li>
<li>SDカード</li>
<li>USBメモリ（音楽ファイル保存用）</li>
<li>DAC + スピーカー（今回はJBLのpebblesを使用）</li>
<li>セルフパワーのUSBハブ（DACの電源が足りない為）</li>
</ul>
<h2 id="Volumioのインストール">Volumioのインストール</h2><p>Mac環境でのインストール方法です。</p>
<p><a href="https://volumio.org/get-started/" target="_blank" rel="external">Volumioのサイト</a>から、イメージファイルの最新版をダウンロードしてください。</p>
<p>SDカードをMacに挿入し、dfコマンドでデバイス情報を表示させます。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ df</span><br></pre></td></tr></table></figure></p>
<p>デバイス情報が一覧で表示されるので、SDカードのデバイス名を確認してください。<br>例:/dev/disk4s1</p>
<p>SDカードをアンマウントします。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo diskutil unmount /dev/disk4s1</span><br></pre></td></tr></table></figure></p>
<p>ダウンロードしたイメージファイルをSDカードに書き込みます。<br>この時、デバイス名を/dev/disk4s1から/dev/rdisk4にしてください。<br>書き込みは数分かかります。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dd bs=<span class="number">1</span>m <span class="keyword">if</span>=[イメージファイルのパス] of=/dev/rdisk4</span><br></pre></td></tr></table></figure></p>
<p>書き込みが終わったら、ラズパイにSDカードをセットします。</p>
<h2 id="Volumioの起動">Volumioの起動</h2><p>SDカードをセットしたラズパイに、LANケーブルを接続して電源をつなぐと、<br>Volumioが起動します。</p>
<p>デフォルトでAirPlayが有効になっているため、手持ちのiPhoneからAirPlayを選択すると、<br>スピーカーから音楽を再生することができます。</p>
<h2 id="Volumioの設定">Volumioの設定</h2><p>Webブラウザから<a href="http://volumio.local" target="_blank" rel="external">http://volumio.local</a>にアクセスすると、以下のような画面が表示されます。</p>
<img src="/2015/11/05/003_how-to-volumio/volumio.png" alt="Volumio.local" title="Volumio.local">
<p>右上のMENUから様々な設定を変えることができます。</p>
<h2 id="設定例">設定例</h2><p>ここまでの作業でAirPlayを使うことができるのですが、AirPlayは個人的に使いづらいため、<br>ローカルに置いた音楽ファイルをラズパイで再生し、ネットワーク経由で操作を行うことにします。</p>
<p>まず、Volumio.localの設定画面から以下の変更を行います。</p>
<ul>
<li>AirPlayをOFFに</li>
<li>Volume control mixer の Mixer type をdisableに</li>
</ul>
<p>Mixer type をdisableにしたことで、Volumio.localのページからスピーカーの音量を操作できないようにしました。<br>これにより、あらかじめ決めた音量での再生しかできなくなりますが、操作ミスによる爆音再生を防ぐことができます。</p>
<p>スピーカーの音量の設定は、ラズパイにSSHで接続し、以下のコマンドで行ってください。<br>ラズパイのIPアドレスは、Volumio.localのNetworkから調べることができます。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ alsamixer</span><br></pre></td></tr></table></figure></p>
<p>次に、ローカルで音楽ファイルを用意します。<br>NAS等との接続もできますが、今回はUSBメモリに音楽ファイルを用意し、ラズパイにセットしました。</p>
<p>Volumio.localの左下にあるBrowseからUSBを選び、再生したい曲をプレイリストに登録すると、再生できるようになります。</p>
<p>再生についての操作は、Volumio.localから行います。<br>iPhoneからVolumio.localにアクセスした場合でも、同様に操作することができます。</p>
<img src="/2015/11/05/003_how-to-volumio/iPhone.png" alt="iPhoneからの操作" title="iPhoneからの操作">
]]></content>
    <summary type="html">
    <![CDATA[<p>昨年から、ラズパイをAirPlayレシーバーにし、接続したスピーカーから音楽を再生していたのですが、<br>音質の劣化や反応の遅れがあり、Volumioを導入することにしました。</p>
<h2 id="必要機材">必要機材</h2><ul>
<li>Raspberry P]]>
    </summary>
    
      <category term="RaspberryPi" scheme="http://uratouri6.github.io/tags/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexoでブログを作る(2)]]></title>
    <link href="http://uratouri6.github.io/2015/11/04/002_how-to-hexo2/"/>
    <id>http://uratouri6.github.io/2015/11/04/002_how-to-hexo2/</id>
    <published>2015-11-04T06:07:45.000Z</published>
    <updated>2015-12-15T15:42:41.000Z</updated>
    <content type="html"><![CDATA[<p>前回の記事の続きです。</p>
<h2 id="作成したブログをGithub_Pagesで公開する">作成したブログをGithub Pagesで公開する</h2><p>Github Pagesにアップロードするために、gitのdeployerをインストールします。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p>_config.ymlのDeploymentを以下のように編集します。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:[ユーザーのID]/[ユーザーのID].github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>以下のコマンドで、htmlの生成からGithubへのアップロードまで自動で行ってくれます。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy -g</span><br></pre></td></tr></table></figure></p>
<p>Github Pagesの自分のページを確認してみると、ブログがアップされています。<br>タイムラグがあるので、数分後に更新されます。</p>
<h2 id="テーマのインストール">テーマのインストール</h2><p>ブログの見た目を変えたい場合は、公開されているテーマをインストールする方法が簡単です。<br>「hexo theme」と検索すると、たくさんのテーマを見つけることができます。<br>お気に入りのテーマが見つかったら、以下のコマンドからダウンロードしてみましょう。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> [テーマのURL] themes</span><br></pre></td></tr></table></figure></p>
<p>_config.ymlファイルを編集し、ダウンロードしたテーマを適応します。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://github.com/hexojs/hexo/wiki/Plugins</span></span><br><span class="line"><span class="comment">## Themes: https://github.com/hexojs/hexo/wiki/Themes</span></span><br><span class="line">theme: [インストールしたテーマ名]</span><br><span class="line">exclude_generator:</span><br></pre></td></tr></table></figure>
<p>もちろん、themesフォルダ内を編集することで、テーマを自作することも可能です。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前回の記事の続きです。</p>
<h2 id="作成したブログをGithub_Pagesで公開する">作成したブログをGithub Pagesで公開する</h2><p>Github Pagesにアップロードするために、gitのdeployerをインストールします。<br><]]>
    </summary>
    
      <category term="hexo" scheme="http://uratouri6.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexoでブログを作る(1)]]></title>
    <link href="http://uratouri6.github.io/2015/11/04/001_how-to-hexo1/"/>
    <id>http://uratouri6.github.io/2015/11/04/001_how-to-hexo1/</id>
    <published>2015-11-03T17:03:16.000Z</published>
    <updated>2015-12-15T15:39:18.000Z</updated>
    <content type="html"><![CDATA[<p>日々の活動をまとめたブログを作るため、hexoを導入しました。導入までの過程を簡単にまとめておきます。</p>
<h2 id="hexoとは">hexoとは</h2><p>hexo とは、node.js で作成された静的サイトジェネレータです。</p>
<p>Github Pagesと組み合わせることで、簡単にブログを作ることができます。</p>
<h2 id="環境構築">環境構築</h2><ul>
<li>Node.jsをインストール。</li>
<li>Github Pagesのリポジトリを作る。</li>
<li>Githubに秘密鍵を登録し、SSHでpushできるようにする。</li>
</ul>
<h2 id="hexoをインストール">hexoをインストール</h2><p>hexoをインストールします。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure></p>
<p>ブログ用のフォルダを作成します。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [フォルダ名]</span><br></pre></td></tr></table></figure></p>
<p>作成したフォルダへ移動し、モジュールをダウンロードします。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> [フォルダ名]</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p>
<h2 id="ローカルサーバーの立ち上げ">ローカルサーバーの立ち上げ</h2><p>すでに見本の記事が生成されているので、以下のコマンドでローカルサーバーを立ち上げます。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p>
<p><a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>にアクセスすると、hexoブログが表示されます。</p>
<img src="/2015/11/04/001_how-to-hexo1/hexo.png" alt="初期状態のブログ" title="初期状態のブログ">
<p>ブログを確認できたら、Ctrl + C でサーバーを止めます。</p>
<h2 id="_config-ymlの編集">_config.ymlの編集</h2><p>_config.ymlを編集することで、ブログの名前などを変更することができます。</p>
<p>編集例（このサイトの場合）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: &lt;urouro&gt;</span><br><span class="line">subtitle: 村田製作場日誌</span><br><span class="line">description: </span><br><span class="line">author: uratouri6</span><br><span class="line">language: ja</span><br><span class="line">timezone: Asia/Tokyo</span><br></pre></td></tr></table></figure>
<p>他の要素などについて、詳しくは<a href="https://hexo.io/docs/configuration.html" target="_blank" rel="external">ここ</a>を見てください。</p>
<h2 id="記事を書く">記事を書く</h2><p>それでは、実際に記事を書いていきましょう。<br>新しい記事の追加は以下のコマンドで行います。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [記事タイトル]</span><br></pre></td></tr></table></figure></p>
<p>source/_postsに[記事タイトル].mdが追加されているので、これを編集します。<br>Markdownで書くことができます。</p>
<img src="/2015/11/04/001_how-to-hexo1/md.png" alt="記事の作成" title="記事の作成">
<p>記事を書いたら、サーバーを立ち上げてブログを確認しましょう。</p>
<p>次回は、Github Pagesでのブログ公開についてやっていきます。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>日々の活動をまとめたブログを作るため、hexoを導入しました。導入までの過程を簡単にまとめておきます。</p>
<h2 id="hexoとは">hexoとは</h2><p>hexo とは、node.js で作成された静的サイトジェネレータです。</p>
<p>Github ]]>
    </summary>
    
      <category term="hexo" scheme="http://uratouri6.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
